/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => JKMouseScroll
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  scrollSpeed: 10,
  repeatInterval: 5
};
var JKMouseScroll = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.lastGPress = 0;
    this.intervalId = null;
    this.currentKey = null;
    this.handleKeyDown = (event) => {
      if (!this.shouldHandleKeys())
        return;
      const previewContent = this.getPreviewContent();
      if (!previewContent)
        return;
      const now = Date.now();
      const key = event.key.toLowerCase();
      if (key === "g") {
        if (event.shiftKey) {
          previewContent.scrollTo({
            top: previewContent.scrollHeight,
            behavior: "smooth"
          });
          event.preventDefault();
        } else {
          if (now - this.lastGPress < 500) {
            previewContent.scrollTo({ top: 0, behavior: "smooth" });
            event.preventDefault();
          }
          this.lastGPress = now;
        }
      }
      if (key === "j" || key === "k") {
        if (!event.repeat && this.intervalId === null) {
          this.currentKey = key;
          this.scrollOnce(previewContent, key, false);
          this.intervalId = window.setInterval(() => {
            if (!this.shouldHandleKeys()) {
              window.clearInterval(this.intervalId);
              this.intervalId = null;
              this.currentKey = null;
              return;
            }
            const pc = this.getPreviewContent();
            if (pc && this.currentKey) {
              this.scrollOnce(pc, this.currentKey, true);
            }
          }, this.settings.repeatInterval);
        }
        event.preventDefault();
      }
    };
    this.handleKeyUp = (event) => {
      const key = event.key.toLowerCase();
      if ((key === "j" || key === "k") && key === this.currentKey) {
        if (this.intervalId !== null) {
          window.clearInterval(this.intervalId);
          this.intervalId = null;
          this.currentKey = null;
        }
      }
    };
  }
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new JKMouseScrollSettingTab(this.app, this));
    this.registerDomEvent(document, "keydown", this.handleKeyDown);
    this.registerDomEvent(document, "keyup", this.handleKeyUp);
  }
  onunload() {
    if (this.intervalId !== null) {
      window.clearInterval(this.intervalId);
    }
  }
  getPreviewContent() {
    const activeView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
    if (!activeView || activeView.getMode() !== "preview")
      return null;
    return activeView.previewMode.containerEl.querySelector(".markdown-preview-view");
  }
  shouldHandleKeys() {
    const activeEl = document.activeElement;
    if (document.querySelector(".modal"))
      return false;
    if (activeEl) {
      const tagName = activeEl.tagName.toLowerCase();
      const isEditable = tagName === "input" || tagName === "textarea" || activeEl.isContentEditable;
      if (isEditable)
        return false;
    }
    const previewContent = this.getPreviewContent();
    return !!previewContent && previewContent.contains(activeEl);
  }
  scrollOnce(previewContent, key, isRepeat) {
    const speed = this.settings.scrollSpeed;
    if (key === "j") {
      if (isRepeat) {
        previewContent.scrollTop += speed;
      } else {
        previewContent.scrollBy({ top: speed, behavior: "smooth" });
      }
    } else if (key === "k") {
      if (isRepeat) {
        previewContent.scrollTop -= speed;
      } else {
        previewContent.scrollBy({ top: -speed, behavior: "smooth" });
      }
    }
  }
  async loadSettings() {
    this.settings = { ...DEFAULT_SETTINGS, ...await this.loadData() };
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var JKMouseScrollSettingTab = class extends import_obsidian.PluginSettingTab {
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Scroll speed").setDesc("Pixels to scroll per keypress (default: 10)").addText((text) => text.setPlaceholder("10").setValue(this.plugin.settings.scrollSpeed.toString()).onChange(async (value) => {
      this.plugin.settings.scrollSpeed = parseInt(value) || 50;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Repeat interval").setDesc("Milliseconds between scroll steps when holding keys; the recommended value is 5").addText((text) => text.setPlaceholder("5").setValue(this.plugin.settings.repeatInterval.toString()).onChange(async (value) => {
      this.plugin.settings.repeatInterval = parseInt(value) || 50;
      await this.plugin.saveSettings();
    }));
  }
};


/* nosourcemap */